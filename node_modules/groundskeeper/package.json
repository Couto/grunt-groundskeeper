{
  "name": "groundskeeper",
  "description": "Pragmas and console statements remover",
  "version": "0.1.0",
  "author": {
    "name": "Luis Couto",
    "email": "couto@15minuteslate.net",
    "url": "15minuteslate.net"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Couto/groundskeeper"
  },
  "bin": {
    "groundskeeper": "./bin/groundskeeper"
  },
  "dependencies": {
    "falafel": "~0.1.4",
    "colors": "~0.6.0-1",
    "commander": "~1.0.5",
    "esprima": "~1.0.2"
  },
  "devDependencies": {
    "cdir": "~0.1.2",
    "mocha": "~1.7.0"
  },
  "engines": {
    "node": ">=0.8"
  },
  "scripts": {
    "test": "mocha --ui exports --reporter tap"
  },
  "readme": "groundskeeper\n=============\n\n__Current Version:__ 0.1.0\n\n[![Build Status](https://secure.travis-ci.org/Couto/groundskeeper.png?branch=dev)](https://travis-ci.org/Couto/groundskeeper)\n\nThis is a small utility to remove forgotten `console`, `debugger` and specific blocks of code from Javascript files.\n\nIt just happens that I forget __a lot__ to remove `console` statements when moving code to production... at the same time I like to do a lot of validations while in development enviroment, validations that are not really needed when in production mode.\n\nThis tool is exactly that tool that removes all those useless stuff.\n\nRequirements\n------------\n - [nodejs](https://github.com/joyent/node)\n - [npm](https://github.com/isaacs/npm) - If you're using a recent version of [nodejs](https://github.com/joyent/node/tree/v0.6.18) it should be already installed\n\nInstalation\n-----------\n\nThe easiest way is to use [npm](https://github.com/isaacs/npm)\n\n```shell\nnpm install groundskeeper -g\n```\n\nUsage\n-----\n\nPretty simple... dirty file goes in, clean file goes out:\n\nin shell:\n```shell\ngroundskeeper < dirty.js > clean.js\n```\n\nin javascript:\n```javascript\nvar fs = require('fs'),\n    groundskeeper = require('groundskeeper'),\n    file = fs.readFileSync('dirtyFile.js', 'utf8'),\n    cleaner = groundskeeper(options);\n\ncleaner.write(file);\nfs.writeFileSync('cleanFile.js', cleaner.isString(), 'utf8');\n```\n\nStreams are supported by groundskeeper, but not by [esprima](http://code.google.com/p/esprima/issues/detail?id=92&q=Enhancement), if you really want to use Streams, make sure that your files are below 40960 bytes, still... the example:\n\n```javascript\nvar fs = require('fs'),\n    groundskeeper = require('groundskeeper'),\n    dirty = fs.createReadStream('dirty.js'),\n    clean = fs.createWriteStream('clean.js'),\n    cleaner = groundskeeper(options),\n\n\ndirty.setEncoding('utf8');\ndirty.pipe(cleaner).pipe(clean);\n```\n\n\nBy default `groundskeeper` removes all `console`, `debugger;` and pragmas that it founds, the following options allow you to specify what you want to __keep__:\n\nin Javascript:\n\n```javascript\n{\n    console: true,                          // Keep console logs\n    debugger: true                          // Keep debugger; statements\n    pragmas: ['validation', 'development'], // Keep pragmas with the following identifiers\n    namespace: 'App.logger'                 // Besides console also remove functions in the given namespace,\n    replace: '0'                            // For the ones who don't know how to write Javascript...\n}\n```\n\nin Shell:\n\n```shell\n-p, --pragmas <names>     comma-delimited <names> to keep, everything else is removed\n-n, --namespace <string>  If you use your own logger utility, specify here, e.g.: `App.logger`\n-d, --debugger [boolean]  If true, it will keep `debbuger;` statements\n-c, --console [boolean]   If true, it keeps `console` statements\n-r, --replace <string>    If given it will replace every console with the given value\n```\n\nIf you use your own logger utility, you can also remove those by specifying a namespace.\nAssuming your utility is `App.logger.log('yeyy')`\n\n```shell\ngroundskeeper -n App.logger.log < dirty.js > clean.js\n```\n\nIf you have multiple functions (warn, count...) in that namespace you can specify `App.logger` only to remove them all:\n\n```shell\ngroundskeeper -n App.logger < dirty.js > clean.js\n```\n\n__Note:__\nIn certain cases, you can't remove the `console` entirely, a pretty tipical case of that is:\n\n```javascript\nif (condition) console.log(\"condition true\");\nelse console.log(\"condition false\")\n\n// yeah... most cases happen when people don't use brackets...\n```\n\nAfter removing the `console` statements the previous code becomes:\n\n```javascript\nif (condition)\nelse\n```\n... which is illegal.\n\nThat's when you should use the `replace` option by specifying a string, where the code becomes:\n\n```\n// assuming 'replace' = '0'\nif (condition) '0'\nelse '0'\n```\n... which is harmless, not pretty, but harmless.\n\n\n__Pragmas__\n\nIf you're wondering how to remove entire blocks of code, you can do that by using comments.\n\n```javascript\nvar clone = function (arr) {\n\n    //<validation>\n    if (Object.prototype.toString.call(arr) !== '[object Array]') {\n        throw new Error('Invalid argument given');\n    }\n    //</validation>\n\n    return arr.map(function (val) {});\n};\n```\n\nNotice those comments? They specify a block code of validation, you can specify whatever name you wish, as long as you respect the format.\n\nTests\n-----\nTests are ran using [mocha](http://visionmedia.github.com/mocha/) and [jscoverage](https://github.com/visionmedia/node-jscoverage) you can install mocha with `npm install`, but you'll need to clone and install jscoverage from this [repository](https://github.com/visionmedia/node-jscoverage)\n\nTo issue the tests, take a look at the [Makefile](https://github.com/Couto/groundskeeper/blob/master/Makefile), but in short, it's just a matter of doing:\n\n```shell\nmake test\n```\n\nIf you want to see the code coverage, just write:\n```shell\nmake lib-cov && make test-cov\n```\n\nTODO\n----\n * Finish tests\n\nLicense\n-------\nCopyright (c) 2012 Lu√≠s Couto Licensed under the [MIT License](http://couto.mit-license.org)\n",
  "readmeFilename": "README.md",
  "_id": "groundskeeper@0.1.0",
  "_from": "groundskeeper"
}
